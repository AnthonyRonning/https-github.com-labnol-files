{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Elliptic AML API",
    "x-explorer-description": "**Welcome to the Elliptic API Explorer**\n\nThis area allows you to experiment with API requests in your browser. Browse to a request of interest and `Try it out`. If you are looking for the full documentation, head over to [the docs section](/developers/docs)\n\n**Any requests made here will run against the team you are logged in with, so we advise using your sandbox environment**\n",
    "description": "# Introduction\n**Welcome to the Elliptic API Documentation**\n\nIn its simplest form, the Elliptic API allows you to [submit batches of transactions programmatically](#operation/analysisBatch), without human intervention. By connecting directly from your internal systems, you control what is submitted for analysis and when. Your compliance team can then log into the Elliptic web interface and analyse the results of the requested transaction screenings.\n\nBeyond batch-submitting transactions, the Elliptic API can also be used to obtain immediate responses to transaction or address analysis requests through our [synchronous endpoint](#operation/analysisSync). This option returns the result of the analysis in the same request in case you want to use the information for immediate reference. This is only recommended if you have a low volume of transactions (due to API rate limiting) and you need access to the results immediately for compliance workflow reasons. If you have high volumes or do not need to make time critical responses, use the [batch endpoint](#operation/analysisBatch).\n\nThe API can also be used to interrogate your analyzed customers, transactions, addresses and risk rules, pulling information at scale, with the filters of your choice. For example, if you want to import all the analyzed transactions with the respective dollar amount, risk score, CustomerID, etc into your Transaction Monitoring System you can do so by using the GET endpoints. You can find more information about this in the [get all analysis results section](#operation/getAllAnalyses).\n\nAdditionally, for more advanced use-cases, the Elliptic API can also be used to carry out workflows programmatically (i.e. label, assign or archive customers, set transactions notes, create or remove customer labels etc.). This is particularly helpful if you are using Elliptic through your own bespoke built Transaction Monitoring System, rather than the Elliptic AML web interface.\n\n## Experimenting with the API\nIf you'd like to make some requests with the API in your browser, head over to the [API explorer](/developers/explorer)\n\n## Getting Started\n1. First, request your API keys through your Customer Success Manager or via [customers@elliptic.co](mailto:customers@elliptic.co). For privacy reasons, you will be asked for a keybase username or PGP Public Key;\n2. [Authenticate with the API](#section/Authentication), using the credentials provided in step 1 as this will allow you to pass our API’s user verification;\n3. [Submit your first test request](#operation/analysisSync). The submitted transactions will appear immediately in the Elliptic AML web interface.\n# Configuration\n### Types\n  All timestamps are represented as ISO8601-formatted date strings with time zone.\n### Requests\n  All HTTP requests and responses are application/json content type and typical HTTP response status codes for success and failure are used.\n  All successful requests will respond with an HTTP 2xx status code and will contain a body (except in the case of a 204). The body varies by endpoint and will be described for each resource below, but will contain a JSON data object or array (for individual and multiple resources, respectively).\n  All other requests will respond with an HTTP 4xx or 5xx status code. Furthermore, the body will contain an array of error messages to help with understanding the cause of failure.\n### Rate Limiting\n  There is a global limit of 500 requests per minute. This applies to all requests (GET, POST, etc.).\n  If the limit is reached an HTTP 429 status code will be returned.\n\n# Authentication\nAll HTTP requests to API endpoints require authentication and authorization. For code samples see our [Authenication Cookbooks](#section/Cookbooks/Authentication)\n\nElliptic will provide an API key and secret which must be used to set HTTP headers. These headers will be used to verify and authorize all requests.\n\nThe following headers should be added to all HTTP requests:\n\nKey | Value\n--- | ---\nx-access-key | \\<API_KEY\\>\nx-access-sign | \\<SIGNATURE_OF_REQUEST\\>\nx-access-timestamp | \\<TIME_OF_REQUEST_IN_MS\\> (in milliseconds)\n\nExamples of how to generate the signature can be found to the below. The following variables are referenced:\n\nVariable | Description\n------- | ---------\nTIME_OF_REQUEST_IN_MS | The current time formatted as the current unix timestamp (in milliseconds)\nSIGNATURE_OF_REQUEST | A Base64 string encoded HMAC-SHA256 of REQUEST_TEXT signed with the Base64 decoded SECRET\nREQUEST_TEXT | a plain string concatenation of: TIME_OF_REQUEST_IN_MS, HTTP_METHOD (uppercase), HTTP_PATH (lowercase API path including query string), REQUEST_BODY (string encoded JSON object, or “{}” if there is no body)\n\nFrom now on, all code examples will assume you are attaching the authentication headers\n\n# Cookbooks\n\n## Authentication\nWe've provided Authentication cookbooks for commonly used langauges below. If your language isn't listed here, [let us know](mailto:customers@elliptic.co) and we'll add it\n\n<details><summary>Javascript</summary>\n\n```javascript\nconst crypto = require('crypto');\n\n/*\n* Generate a signature for use when signing a request to the API\n*\n*   - secret:          your secret supplied by Elliptic - a base64 encoded string\n*   - time_of_request: current time, in milliseconds, since 1 Jan 1970 00:00:00 UTC\n*   - http_method:     must be uppercase\n*   - http_path:       API endpoint including query string\n*   - payload:         string encoded JSON object or '{}' if there is no request body\n*/\nfunction get_signature(secret, time_of_request, http_method, http_path, payload) {\n\n  // create a SHA256 HMAC using the supplied secret, decoded from base64\n  const hmac = crypto.createHmac('sha256', Buffer.from(secret, 'base64'));\n\n  // concatenate the request text to be signed\n  const request_text = time_of_request + http_method + http_path.toLowerCase() + payload;\n\n  // update the HMAC with the text to be signed\n  hmac.update(request_text);\n\n  // output the signature as a base64 encoded string\n  return hmac.digest('base64');\n}\n\nconst SECRET = '894f142d667e8cdaca6822ac173937af'; // Supplied by Elliptic\n// Disclaimer: this secret is just an example\nconst TIME_OF_REQUEST_IN_MS = 1478692862000; // For real world use Date.now()\n\nconst EXAMPLE_PAYLOAD = [\n  {\n    \"customer_reference\": \"123456\",\n    \"subject\": {\n      \"asset\": \"BTC\",\n      \"hash\": \"accf5c09cc027339a3beb2e28104ce9f406ecbbd29775b4a1a17ba213f1e035e\",\n      \"output_address\": \"15Hm2UEPaEuiAmgyNgd5mF3wugqLsYs3Wn\",\n      \"output_type\": \"address\",\n      \"type\": \"transaction\"\n    },\n    \"type\": \"source_of_funds\"\n  }\n]\n\n// Example One: POST with payload\nconsole.log(get_signature(SECRET, TIME_OF_REQUEST_IN_MS, 'POST', '/v2/analyses', JSON.stringify(EXAMPLE_PAYLOAD)));\n// 65mQHB2o95lL3I+N/bZYwDC9p2YvNwsVDnXr8u72hUk=\n\n// Example Two: GET with empty payload\nconsole.log(get_signature(SECRET, TIME_OF_REQUEST_IN_MS, 'GET', '/v2/customers', '{}'));\n// cN9fRUqeT7UnwwpkBZaNmnwxKAPHkhytdXelfUVvxMI=\n```\n\n</details>\n<details><summary>Python 2/3</summary>\n\n```python\nimport json, base64, hmac as crypto, hashlib\n\n#\n# Generate a signature for use when signing a request to the API\n#\n#   - secret:          your secret supplied by Elliptic - a base64 encoded string\n#   - time_of_request: current time, in milliseconds, since 1 Jan 1970 00:00:00 UTC\n#   - http_method:     must be uppercase\n#   - http_path:       API endpoint including query string\n#   - payload:         string encoded JSON object or '{}' if there is no body\n#\ndef get_signature(secret, time_of_request, http_method, http_path, payload):\n\n  # create a SHA256 HMAC using the supplied secret, decoded from base64\n  hmac = crypto.new(base64.b64decode(secret), digestmod=hashlib.sha256)\n\n  # concatenate the text to be signed\n  request_text = time_of_request + http_method + http_path.lower() + payload\n\n  # update the HMAC with the text to be signed\n  hmac.update(request_text.encode('UTF-8'))\n\n  # output the signature as a base64 encoded string\n  return base64.b64encode(hmac.digest()).decode('utf-8')\n\n\n  SECRET = '894f142d667e8cdaca6822ac173937af'   # Supplied by Elliptic - a base64 encoded string\n  # Disclaimer: this secret is just an example\n  TIME_OF_REQUEST_IN_MS = '1478692862000' # for real world use str(int(round(time.time() * 1000)))\n\n  EXAMPLE_PAYLOAD = [\n    {\n      \"customer_reference\": \"123456\",\n      \"subject\": {\n        \"asset\": \"BTC\",\n        \"hash\": \"accf5c09cc027339a3beb2e28104ce9f406ecbbd29775b4a1a17ba213f1e035e\",\n        \"output_address\": \"15Hm2UEPaEuiAmgyNgd5mF3wugqLsYs3Wn\",\n        \"output_type\": \"address\",\n        \"type\": \"transaction\"\n      },\n      \"type\": \"source_of_funds\"\n    }\n  ]\n\n  # Example One: POST with payload\n  print(get_signature(SECRET, TIME_OF_REQUEST_IN_MS, 'POST', '/v2/analyses', json.dumps(EXAMPLE_PAYLOAD, separators=(',', ':'), sort_keys=True)))\n  # 65mQHB2o95lL3I+N/bZYwDC9p2YvNwsVDnXr8u72hUk=\n\n  # Example Two: GET with empty payload\n  print(get_signature(SECRET, TIME_OF_REQUEST_IN_MS, 'GET', '/v2/customers', '{}'))\n  # cN9fRUqeT7UnwwpkBZaNmnwxKAPHkhytdXelfUVvxMI\n```\n\n</details>\n<details><summary>Java</summary>\n\n```java\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Base64;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\npublic class EllipticAuth {\n  /*\n  * Generate a signature for use when signing a request to the API\n  *\n  *   - secret:          your secret supplied by Elliptic - a base64 encoded string\n  *   - time_of_request: current time, in milliseconds, since 1 Jan 1970 00:00:00 UTC\n  *   - http_method:     must be uppercase\n  *   - http_path:       API endpoint including query string\n  *   - payload:         string encoded JSON object or \"{}\" if there is no request body\n  */\n  public static String get_signature(String secret, String time_of_request, String http_method, String http_path, String payload) {\n\n    try {\n      // create a SHA256 HMAC using the supplied secret, decoded from base64\n      Mac hmac = Mac.getInstance(\"HmacSHA256\");\n      SecretKeySpec secret_key = new SecretKeySpec(Base64.decodeBase64(secret), \"HmacSHA256\");\n      hmac.init(secret_key);\n\n      // concatenate the request text to be signed\n      String request_text = time_of_request + http_method + http_path.toLowerCase() + payload;\n\n      // update the HMAC with the text to be signed\n      hmac.update(request_text.getBytes());\n\n      // output the signature as a base64 encoded string\n      return Base64.encodeBase64String(hmac.doFinal());\n    } catch(InvalidKeyException | NoSuchAlgorithmException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  public static String SECRET = \"894f142d667e8cdaca6822ac173937af\"; // Supplied by Elliptic - a base64 encoded string\n  // Disclaimer: this secret is just an example\n  public static String TIME_OF_REQUEST_IN_MS = \"1478692862000\";  // For real world use currentTimeMillis()\n  public static String EXAMPLE_PAYLOAD = \"[{\\\"customer_reference\\\":\\\"123456\\\",\\\"subject\\\":{\\\"asset\\\":\\\"BTC\\\",\\\"hash\\\":\\\"accf5c09cc027339a3beb2e28104ce9f406ecbbd29775b4a1a17ba213f1e035e\\\",\\\"output_address\\\":\\\"15Hm2UEPaEuiAmgyNgd5mF3wugqLsYs3Wn\\\",\\\"output_type\\\":\\\"address\\\",\\\"type\\\":\\\"transaction\\\"},\\\"type\\\":\\\"source_of_funds\\\"}]\";\n\n  public static void main(String[] args) {\n    // Example One: POST with payload\n    System.out.println(get_signature(EllipticAuth.SECRET, EllipticAuth.TIME_OF_REQUEST_IN_MS, \"POST\", \"/v2/analyses\", EXAMPLE_PAYLOAD));\n    // 65mQHB2o95lL3I+N/bZYwDC9p2YvNwsVDnXr8u72hUk=\n\n    // Example Two: GET with empty payload\n    System.out.println(get_signature(EllipticAuth.SECRET, EllipticAuth.TIME_OF_REQUEST_IN_MS, \"GET\", \"/v2/customers\", \"{}\"));\n    // cN9fRUqeT7UnwwpkBZaNmnwxKAPHkhytdXelfUVvxMI=\n    return;\n  }\n}\n```\n\n</details>\n\n<details><summary>Ruby</summary>\n\n```ruby\nrequire 'base64'\nrequire 'json'\nrequire 'openssl'\n\n=begin\n Generate a signature for use when signing a request to the API\n\n   - secret:          your secret supplied by Elliptic - a base64 encoded string\n   - time_of_request: current time, in milliseconds, since 1 Jan 1970 00:00:00 UTC\n   - http_method:     must be uppercase\n   - http_path:       API endpoint including query string\n   - payload:         string encoded JSON object or '{}' if there is no request body\n=end\ndef get_signature(secret, time_of_request, http_method, http_path, payload)\n  # concatenate the request text to be signed\n  request_text = time_of_request + http_method + http_path.downcase + payload\n\n  # create a SHA256 HMAC using the supplied secret, decoded from base64, and update it with the request_text\n  hmac = OpenSSL::HMAC.digest('SHA256', Base64.decode64(secret), request_text)\n\n  # output the signature as a base64 encoded string\n  signed = Base64.encode64(hmac).strip.encode('UTF-8')\nend\n\nSECRET = '894f142d667e8cdaca6822ac173937af' # Supplied by Elliptic\n# Disclaimer: this secret is just an example\nTIME_OF_REQUEST_IN_MS = '1478692862000' # For real world use (Time.now.to_i * 1000)\nEXAMPLE_PAYLOAD = [\n  {\n    \"customer_reference\": \"123456\",\n    \"subject\": {\n      \"asset\": \"BTC\",\n      \"hash\": \"accf5c09cc027339a3beb2e28104ce9f406ecbbd29775b4a1a17ba213f1e035e\",\n      \"output_address\": \"15Hm2UEPaEuiAmgyNgd5mF3wugqLsYs3Wn\",\n      \"output_type\": \"address\",\n      \"type\": \"transaction\"\n    },\n    \"type\": \"source_of_funds\"\n  }\n]\n\n# Example One: POST with payload\nputs(get_signature(SECRET, TIME_OF_REQUEST_IN_MS, 'POST', '/v2/analyses', JSON.generate(EXAMPLE_PAYLOAD)))\n# 65mQHB2o95lL3I+N/bZYwDC9p2YvNwsVDnXr8u72hUk=\n\n# Example Two: GET with empty payload\nputs(get_signature(SECRET, TIME_OF_REQUEST_IN_MS, 'GET', '/v2/customers', '{}'))\n# cN9fRUqeT7UnwwpkBZaNmnwxKAPHkhytdXelfUVvxMI\n```\n\n</details>\n"
  },
  "servers": [
    {
      "url": "https://aml-api.elliptic.co/v2",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "Transaction Analyses",
      "x-explorer-description": "Run blockchain analysis against one or more transactions. Get and update previously run analyses.\n",
      "description": "Run blockchain analysis against one or more transactions. Get and update previously run analyses.\n\n## Analysis Subject\n\nTransaction analyses are performed on subjects. The subject type is always set to \"transaction\", with an \"asset\", \"hash\" and further optional paramaters depending on the asset.\n\nThe different structures of subject available are given to the right\n\n### Assets\n\nSee our [current cryptoasset list](https://help.elliptic.co/en/articles/3971472-cryptoasset-list) for an up-to-date list of our supported assets.\n\n**ERC20**\n\nAll ERC20 tokens must be sent to with `ERC20` as the `ASSET_IDENTIFIER`. The API will respond with the resolved token code in `subject.asset`, e.g. `GUSD` for Gemini Dollar.\n\nAn optional [log_index](https://github.com/ethereum/wiki/wiki/JavaScript-API#contract-events) parameter may be included for ethereum transactions that contain multiple ERC20 token transfers.\n\nIf no `log_index` is supplied, we assume there is only one token transfer against the specified transaction hash - if this is not the case the analysis request will fail with `400 MultipleEmittedTransfers`\n\n**ZRC2**\n\nAll ZRC2 tokens must be sent to with `ZRC2` as the `ASSET_IDENTIFIER`. The API will respond with the resolved token code in `subject.asset`, e.g. `XSGD` for XSGD.\n\n### Analysis Types\n\nYou have a choice of a number of analysis types to perform, depending on the subject you are analysing\n\nAnalysis Type | Description\n----- | -----\nsource_of_funds | Get details of the entities that have contributed funds to the transaction's source address, and calculate a risk score based on this exposure. This is referred to as \"Deposit\" in Navigator.\ndestination_of_funds | Get details of the entities that funds have gone to from this transaction's destination address, and calculate a risk score based on this exposure. This is referred to as \"Withdrawal\" in Navigator.\n\nThe analyses types available, and the subject format to use vary by currency, as defined in the following table. See the code examples to the right for each subject type.\n\n### Assets with Multiple Outputs\n\nSome assets (for example, BTC-like assets), have multiple outputs. In order to analyse a transaction for one of these assets, you must also\nspecify the output(s) of that transaction which are relevant to your analysis. For example, if you are analysing a deposit into your service\nthen you might want to specify the output address that belongs to your service. Or for a withdrawal, it might be the output address that your customer wants to send funds to.\n\nThere are two methods of specifying the relevant outputs. One is by specifying the address, and the other is by specifying the zero-indexed output indices. An example of each can be seen to the right.\n\nWhen specifying the output(s) by indices, if the indices given reference multiple distinct addresses, the API will respond with an error.\n"
    },
    {
      "name": "Wallet Analyses",
      "x-explorer-description": "Run blockchain analysis against one or more wallets. Get and update previously run analyses.\n",
      "description": "Run blockchain analysis against one or more wallets. Get and update previously run analyses.\n\n## Analysis Subject\n\nAnalyses are performed on subjects. The subject type is always set to \"address\", with an \"asset\", \"hash\" and further optional paramaters depending on the asset.\n\n### Assets\n\nSee our [current cryptoasset list](https://help.elliptic.co/en/articles/3971472-cryptoasset-list) for an up-to-date list of our supported assets.\n\n*We do not currently support ERC20 or ZRC2 wallet analysis*\n\n### Analysis Types\n\nCurrently, there is one analysis type available for analysing wallets\n\nAnalysis Type | Description\n----- | -----\nwallet_exposure | perform an exposure analysis of the wallet\n"
    },
    {
      "name": "Customers",
      "description": "The customers endpoints are used to manage customers which you have associated analysis with, via the `customer_reference` analysis subject attribute.\n\nCurrently, the customers endpoints only refer to customers with [Transaction Analysis](#tag/Transaction-Analyses).\n\nCustomers with only [Wallet Analysis](#tag/Wallet-Analyses) will not yield responses from these endpoints\n"
    },
    {
      "name": "Customer Labels",
      "description": "Customer labels are configurable labels that can be used to manage your customers.\n\nUse these endpoints to configure customer labels.\n"
    },
    {
      "name": "Risk Rules",
      "description": "Manage risk rules. Currently the same risk rules are used for Navigator and Lens"
    },
    {
      "name": "Users",
      "description": "Manage users"
    }
  ],
  "paths": {
    "/customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Paginate all customers",
        "description": "Paginate through all customers, with various sort/filter parameters.\n",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "requested page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "workflow_status",
            "description": "workflow status filter",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "active",
                  "archived"
                ]
              },
              "default": []
            }
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "filter both label and reference (case insensitive). Whitespace implies AND.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "filter by label name",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "investigator_id",
            "description": "filter by these ids of users assigned to investigate the customer (can be empty string to get unassigned)",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "NullableUUIDv4"
              }
            }
          },
          {
            "name": "customer_label_id",
            "in": "query",
            "description": "label filter (if empty string then customers with no labels are returned)",
            "schema": {
              "type": "string",
              "format": "NullableUUIDv4"
            }
          },
          {
            "name": "reference_contains",
            "in": "query",
            "description": "a string on which to match customer references",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "reference",
            "in": "query",
            "description": "a customer reference to match (exactly)",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "to get more detailed labels object",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "labels"
                ]
              },
              "default": []
            }
          },
          {
            "name": "sort",
            "description": "sorting criterion",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "last_queried",
                "-last_queried",
                "reference",
                "-reference",
                "first_tx_time",
                "-first_tx_time",
                "last_tx_time",
                "-last_tx_time",
                "max_score",
                "-max_score",
                "avg_score",
                "-avg_score",
                "total_volume",
                "-total_volume",
                "total_volume_usd",
                "-total_volume_usd",
                "workflow_status",
                "-workflow_status"
              ],
              "default": "-last_queried"
            }
          },
          {
            "name": "minimum_avg_score",
            "description": "filter by avg_score >= the given value",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "maximum_avg_score",
            "description": "filter by avg_score <= the given value",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "minimum_max_score",
            "description": "filter by max_score >= the given value",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "maximum_max_score",
            "description": "filter by max_score <= the given value",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "minimum_vol",
            "description": "filter by volume >= the given value in USD",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "maximum_vol",
            "description": "filter by volume <= the given value in USD",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "first_tx_before",
            "description": "filter the earliest transaction time of this customer (ISO8601 datetime) <= the given date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2030-02-26T14:33:34.787Z"
          },
          {
            "name": "first_tx_after",
            "description": "filter the earliest transaction time of this customer (ISO8601 datetime) >= the given date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2010-02-26T14:33:34.787Z"
          },
          {
            "name": "last_tx_before",
            "description": "filter the latest transaction time of this customer (ISO8601 datetime) <= the given date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2030-02-26T14:33:34.787Z"
          },
          {
            "name": "last_tx_after",
            "description": "filter the latest transaction time of this customer (ISO8601 datetime) >= the given date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2010-02-26T14:33:34.787Z"
          },
          {
            "name": "last_queried_before",
            "description": "filter last_queried time of customer (ISO8601 datetime) <= the given date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2030-02-26T14:33:34.787Z"
          },
          {
            "name": "last_queried_after",
            "description": "filter last_queried time of customer (ISO8601 datetime) >= the given date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2010-02-26T14:33:34.787Z"
          },
          {
            "name": "status",
            "description": "allowed statuses",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "complete",
                  "processing",
                  "error"
                ]
              },
              "minItems": 1,
              "default": [
                "complete",
                "processing",
                "error"
              ]
            }
          },
          {
            "name": "include_no_risk",
            "description": "if true, return customers who haven't any transaction that has a risk score and whose statistics have been computed",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "isMc",
            "description": "__should usually be set to true (legacy mode toggle)__:\n* if true: return customers who have at least one exposure transactions\n* if false: return customers who have at least one Bitcoin UTXO transactions\n",
            "in": "query",
            "example": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customers succesfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "int32",
                      "minimum": 0,
                      "example": 5
                    },
                    "per_page": {
                      "type": "number",
                      "format": "int32",
                      "minimum": 0,
                      "example": 5
                    },
                    "total_pages": {
                      "type": "number",
                      "format": "int32",
                      "minimum": 0,
                      "example": 5
                    },
                    "total_items": {
                      "description": "total number of items on all pages",
                      "type": "integer",
                      "format": "int32",
                      "example": 1
                    },
                    "items": {
                      "description": "array of retrieved customers",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Customer"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad request, e.g. invalid `workflow_status` in query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/customers/{customer_id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get customer by ID",
        "description": "Get a single customer by ID\n",
        "parameters": [
          {
            "name": "customer_id",
            "description": "uuid identifier of a customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUIDv4"
            }
          },
          {
            "name": "expand",
            "description": "to expand customer labels and/or statistics",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "labels",
                  "statistics"
                ]
              },
              "default": []
            }
          },
          {
            "name": "isMc",
            "description": "__should usually be set to true (legacy mode toggle)__:\n* if true: return customers who have at least one exposure transactions\n* if false: return customers who have at least one Bitcoin UTXO transactions\n",
            "example": true,
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer succesfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "description": "Customer ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/customers/investigator": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Bulk update investigator ID",
        "description": "The customers & investigator_id must all exist & belong to the team of the authenticated user.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customer_ids": {
                    "description": "the customer id(s) to update",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "string",
                      "format": "UUIDv4",
                      "example": "61dc6f9c-fb4b-4aad-966e-801ea4caa7d6"
                    }
                  },
                  "investigator_id": {
                    "description": "new investigator id (can be null). Replaces old.",
                    "format": "NullableUUIDv4",
                    "example": "801a54af-6bbe-48db-ab28-7edc343649d5",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "customer_ids",
                  "investigator_id"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Customers succesfully updated"
          },
          "400": {
            "description": "Bad request, e.g. invalid `customer_id`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/customers/labels": {
      "post": {
        "tags": [
          "Customer Labels"
        ],
        "summary": "Bulk update customer labels",
        "description": "The customers & labels must all exist & belong to the team of the authenticated user.\n  - It is OK if the labels in \"add\" are already assigned to any of the customers.\n  - It is OK if the labels in \"remove\" are not already assigned to any of the customers.\n\nAt least one of \"add_label_ids\" and \"remove_label_ids\" must be provided.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customer_ids": {
                    "description": "the customer id(s) to update",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "UUIDv4"
                    },
                    "minItems": 1,
                    "example": [
                      "61dc6f9c-fb4b-4aad-966e-801ea4caa7d6",
                      "55f2bf9c-ff91-4146-a9d7-1d484d1dbac5"
                    ]
                  },
                  "add_label_ids": {
                    "description": "the label id(s) to add to all specified customers",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "UUIDv4"
                    },
                    "example": [
                      "0fa942f4-56da-4454-80d0-b6db4a5280fa",
                      "422b1824-2778-4451-8122-8366b19adbe5"
                    ]
                  },
                  "remove_label_ids": {
                    "description": "the label id(s) to remove from all specified customers",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "UUIDv4"
                    },
                    "example": [
                      "c9e98a67-aaa0-45ab-a2c5-2655cfdcb4f0",
                      "422b1824-2778-4451-8122-8366b19adbe5"
                    ]
                  }
                },
                "required": [
                  "customer_ids"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Customers succesfully updated"
          },
          "400": {
            "description": "Bad request, e.g. invalid `customer_id`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/customers/workflow_status": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Bulk update workflow status",
        "description": "The customers must all exist & belong to the team of the authenticated user.\n\nCurrently the only states are 'Active' and 'Archived'. Transitions both ways are allowed.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customer_ids": {
                    "description": "the customer id(s) to update",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "string",
                      "format": "UUIDv4"
                    },
                    "example": [
                      "61dc6f9c-fb4b-4aad-966e-801ea4caa7d6",
                      "55f2bf9c-ff91-4146-a9d7-1d484d1dbac5"
                    ]
                  },
                  "workflow_status": {
                    "description": "new workflow status ('active', 'archived'). Replaces old.",
                    "type": "string",
                    "enum": [
                      "active",
                      "archived"
                    ]
                  }
                },
                "required": [
                  "customer_ids"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Customer succesfully updated"
          },
          "400": {
            "description": "Bad request, e.g. invalid `customer_ids`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/customer_labels/{customer_label_id}": {
      "delete": {
        "tags": [
          "Customer Labels"
        ],
        "summary": "Delete a customer label",
        "description": "Delete a customer label (remove a parent removes all children).\n\n(This first unlinks any associated Customers)\n",
        "parameters": [
          {
            "name": "customer_label_id",
            "description": "uuid identifier of a customer label",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUIDv4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Label succesfully deleted"
          },
          "400": {
            "description": "Bad request, invalid customer_label_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "description": "Customer ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Customer Labels"
        ],
        "summary": "Update a customer label name.",
        "description": "Update a customer label name (for the authenticated actor's team)\n\nThe name must be unique (case-insensitive) within the parent item.\n",
        "parameters": [
          {
            "name": "customer_label_id",
            "description": "uuid identifier of a customer label",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUIDv4"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "new name (max 50 chars)",
                    "type": "string",
                    "example": "Bad person",
                    "maxLength": 50
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer label succesfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerLabel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, a label with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "description": "Customer ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/customer_labels": {
      "get": {
        "tags": [
          "Customer Labels"
        ],
        "summary": "Get all customer labels",
        "description": "Get all customer labels for the authenticated actor's team. No pagination\n",
        "responses": {
          "200": {
            "description": "array of customer-label-objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerLabel"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customer Labels"
        ],
        "summary": "Add a new customer label",
        "description": "Add a new customer label (for the current user's team)\n\nThe name must be unique (case-insensitive) within the parent item.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "new name",
                    "type": "string",
                    "example": "This is a shiny new label",
                    "minLength": 1,
                    "maxLength": 50
                  },
                  "parent_customer_label_id": {
                    "description": "the parent label this should be added beneath",
                    "nullable": true,
                    "type": "string",
                    "example": "f4696088-328e-4c8b-b365-209f35ed21d3"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "the customer-label-object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerLabel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/risk_rules": {
      "get": {
        "tags": [
          "Risk Rules"
        ],
        "summary": "Get team's risk rules.",
        "description": "Get the risk rules for your team",
        "responses": {
          "200": {
            "description": "Rule objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskRule"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/analyses/synchronous": {
      "post": {
        "tags": [
          "Transaction Analyses"
        ],
        "summary": "Run a single analysis",
        "operationId": "analysisSync",
        "description": "Given a subject, customer and analysis type, perform the requested analysis and return the result",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BCHAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/BCHOutputIndexAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/BTCAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/BTCOutputIndexAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ERC20AnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ERC20LogIndexAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ETHAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/LTCAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/LTCOutputIndexAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/XLMAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/XRPAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ZECAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ZECOutputIndexAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ZENAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ZENOutputIndexAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ZILAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ZRC2AnalysisRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AnalysisResponse"
          },
          "400": {
            "$ref": "#/components/responses/GenericBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/NotInBlockchain"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/analyses": {
      "post": {
        "tags": [
          "Transaction Analyses"
        ],
        "summary": "Run a batch of analyses",
        "operationId": "analysisBatch",
        "description": "Performs a batch of analyses. Responses will contain IDs of the newly created analyses.\n\nReturned analyses will be **processing**, you must use the IDs returned to lookup the results later via [GET analyses/:id](#operation/getAnalysisById)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisRequestBatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful analysis batch response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisBatchResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "Transaction Analyses"
        ],
        "summary": "Paginate all analyses",
        "description": "Paginate through all analyses, with various sort/filter parameters.",
        "operationId": "getAllAnalyses",
        "parameters": [
          {
            "name": "tx_time_before",
            "in": "query",
            "description": "filter out all customer transactions whose tx_time is <= the provided value (ISO8601 datetime)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "minimum": 0
            },
            "example": "2030-02-26T14:33:34.787Z"
          },
          {
            "name": "tx_time_after",
            "in": "query",
            "description": "filter out all customer transactions whose tx_time is >= the provided value (ISO8601 datetime)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "minimum": 0
            },
            "example": "2010-02-26T14:33:34.787Z"
          },
          {
            "name": "has_triggered_rule",
            "in": "query",
            "description": "filter by transactions based on whether they've triggered any rules",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "min_risk_score",
            "in": "query",
            "description": "minimum risk score",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0,
              "maximum": 10
            }
          },
          {
            "name": "max_risk_score",
            "in": "query",
            "description": "maximum risk score",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0,
              "maximum": 10
            }
          },
          {
            "name": "min_value",
            "in": "query",
            "description": "minimum value of the asset in it's minor unit (satoshis, wei etc)",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          },
          {
            "name": "max_value",
            "in": "query",
            "description": "minimum value of the asset in it's minor unit (satoshis, wei etc)",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          },
          {
            "name": "min_value_usd",
            "in": "query",
            "description": "minimum USD value",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0
            }
          },
          {
            "name": "max_value_usd",
            "in": "query",
            "description": "maximum USD value",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0
            }
          },
          {
            "name": "analysed_at_before",
            "in": "query",
            "description": "only return analysis that has been analysed before the given time (ISO8601 datetime)",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2030-02-26T14:33:34.787Z"
          },
          {
            "name": "analysed_at_after",
            "in": "query",
            "description": "only return analysis that has been analysed after the given time (ISO8601 datetime)",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2010-02-26T14:33:34.787Z"
          },
          {
            "name": "customer_reference",
            "in": "query",
            "description": "only return analysis whose customer reference matches the given string",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "customer_reference_contains",
            "in": "query",
            "description": "only return analysis whose customer reference contains the given string",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "workflow_status",
            "in": "query",
            "description": "only return analysis whose transaction workflow status matches the given string",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "archived"
              ]
            }
          },
          {
            "name": "hash",
            "in": "query",
            "description": "filter customer transactions whose hash is equal to the given one (case insensitive)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hash_contains",
            "in": "query",
            "description": "filter customer transactions whose hash contains the given string (case insensitive)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address_hash",
            "in": "query",
            "description": "filter customer transactions whose address is equal to the given one (case insensitive)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address_hash_contains",
            "in": "query",
            "description": "filter customer transactions whose address contains the given string (case insensitive)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "get only transactions with given ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "UUIDv4"
              }
            }
          },
          {
            "name": "analysed_by",
            "in": "query",
            "description": "the ID of the actor who ran the query",
            "schema": {
              "type": "string",
              "format": "UUIDv4"
            }
          },
          {
            "name": "customer_id",
            "in": "query",
            "description": "the ID of the customer this transaction is linked to",
            "schema": {
              "type": "string",
              "format": "UUIDv4"
            }
          },
          {
            "name": "process_status",
            "in": "query",
            "description": "return rows that are in any of the states specified in the array. Each element is one of (running, complete, error).",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "running",
                  "complete",
                  "error"
                ]
              }
            }
          },
          {
            "name": "risk_rules",
            "in": "query",
            "description": "return transactions that has triggered at least one of the specified risk_rules. To get transactions that have not triggered any rules, include empty string in your query. e.g. \"?risk_rules=,f7c36274-ba55-4f6b-8d46-d8cbe97d7c32\"",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "NullableUUIDv4"
              },
              "minItems": 1
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "get only deposit or withdrawal analyses",
            "schema": {
              "type": "string",
              "enum": [
                "deposit",
                "withdrawal"
              ]
            }
          },
          {
            "name": "user_supplied_base58",
            "in": "query",
            "description": "if true, returns only transactions created by users that have provided a base58 (for BTC only). Otherwise, return those with provided output_indices.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "asset",
            "in": "query",
            "description": "return only transaction that has been made on a particular blockchain",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by criterion",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "customer_reference",
                "-customer_reference",
                "type",
                "-type",
                "tx_hash",
                "-tx_hash",
                "address_hash",
                "-address_hash",
                "analysed_at",
                "-analysed_at",
                "tx_time",
                "-tx_time",
                "risk_score",
                "-risk_score",
                "value",
                "-value",
                "value_usd",
                "-value_usd",
                "user_supplied_base58",
                "-user_supplied_base58",
                "asset",
                "-asset",
                "workflow_status",
                "-workflow_status",
                "predictive",
                "-predictive"
              ],
              "default": "created_at"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "pagination page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "pagination per page number (1-500)",
            "schema": {
              "type": "number",
              "format": "int32",
              "minimum": 1,
              "maximum": 500,
              "default": 20
            }
          },
          {
            "name": "subject_type",
            "in": "query",
            "description": "get only transaction or address analyses",
            "schema": {
              "type": "string",
              "enum": [
                "transaction",
                "address"
              ],
              "default": "transaction"
            }
          },
          {
            "name": "predictive",
            "in": "query",
            "description": "get only Predictive transactions. Predictive transactions were analyzed too close to the tip of the blockchain, so the full picture of associated addresses might be incomplete.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results that are counted. If more analyses than this number are present then this number is returned. This improves the performance of queries over large datasets",
            "schema": {
              "type": "number",
              "example": 100000
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AnalysisResponse"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/analyses/{mc_analysis_id}": {
      "get": {
        "tags": [
          "Transaction Analyses"
        ],
        "summary": "Get an analysis by ID",
        "operationId": "getAnalysisById",
        "description": "Given an ID, return a single analysis",
        "parameters": [
          {
            "name": "mc_analysis_id",
            "description": "id of the analysis to retrieve",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AnalysisResponse"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Transaction Analyses"
        ],
        "summary": "Update an analysis by ID",
        "description": "Given an ID, update a single analysis",
        "parameters": [
          {
            "name": "mc_analysis_id",
            "in": "path",
            "required": true,
            "description": "id of the analysis to update",
            "schema": {
              "type": "string",
              "format": "UUIDv4"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "note": {
                    "description": "new note",
                    "example": "this is now a very important tx",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "note"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "note": {
                      "type": "string",
                      "description": "The saved note."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/analyses/workflow_status": {
      "post": {
        "tags": [
          "Transaction Analyses"
        ],
        "summary": "Bulk update workflow status",
        "description": "Set the workflow status of the analyses having the ids passed as body to the desired value.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "analyses_ids": {
                    "description": "id of the analyses to change status. Duplicate ids will be considered as one.",
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                      "type": "string",
                      "format": "UUIDv4",
                      "example": "b8ae5c56-c2a6-4868-a03e-b59cb28ecede"
                    }
                  },
                  "workflow_status": {
                    "type": "string",
                    "description": "the workflow status",
                    "enum": [
                      "active",
                      "archived"
                    ]
                  }
                },
                "required": [
                  "analyses_ids",
                  "workflow_status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "status has been set"
          },
          "400": {
            "description": "Bad request, invalid `analysis_ids` in body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of users",
        "description": "Returns a list of users in your team.",
        "responses": {
          "200": {
            "description": "Successful users response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/wallet/synchronous": {
      "post": {
        "tags": [
          "Wallet Analyses"
        ],
        "summary": "Run a single analysis",
        "description": "Given a subject address, analysis type of type \"wallet_exposure\" and an optional customer_reference, perform the requested analysis and return the result",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BCHWalletAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/BTCWalletAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ETHWalletAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ERC20WalletAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/LTCWalletAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/XLMWalletAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/XRPWalletAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ZECWalletAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ZENWalletAnalysisRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ZILWalletAnalysisRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful wallet analysis response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletAnalysisResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/wallet": {
      "post": {
        "tags": [
          "Wallet Analyses"
        ],
        "summary": "Run a batch of analyses.",
        "description": "Performs a batch of analyses. Responses will contain IDs of the newly created analysis.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "the analyses to request",
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/BCHWalletAnalysisRequest"
                    },
                    {
                      "$ref": "#/components/schemas/BTCWalletAnalysisRequest"
                    },
                    {
                      "$ref": "#/components/schemas/ETHWalletAnalysisRequest"
                    },
                    {
                      "$ref": "#/components/schemas/LTCWalletAnalysisRequest"
                    },
                    {
                      "$ref": "#/components/schemas/XRPWalletAnalysisRequest"
                    },
                    {
                      "$ref": "#/components/schemas/ZILWalletAnalysisRequest"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful analysis batch response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "WalletBatchResponse",
                  "type": "array",
                  "description": "details of each submitted analysis",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "UUIDv4",
                        "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
                      },
                      "type": {
                        "$ref": "#/components/schemas/AnalysisType"
                      },
                      "subject": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/AnalysisSubject"
                          }
                        ]
                      },
                      "analysed_by": {
                        "type": "object",
                        "description": "the actor who requested the analysis",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "the actor id",
                            "format": "UUIDv4",
                            "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
                          }
                        }
                      },
                      "analysed_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "the timestamp of when this analysis was completed"
                      },
                      "customer": {
                        "type": "object",
                        "properties": {
                          "reference": {
                            "type": "string",
                            "description": "the string reference that has been given to this customer",
                            "example": "foobar"
                          }
                        }
                      }
                    },
                    "required": [
                      "id",
                      "type",
                      "subject",
                      "analysed_by",
                      "analysed_at"
                    ],
                    "additionalProperties": false
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "Wallet Analyses"
        ],
        "summary": "Paginate all analyses",
        "description": "Paginate through all analyses, with various sort/filter parameters.",
        "parameters": [
          {
            "name": "min_outflow_usd",
            "in": "query",
            "description": "minimum outflow USD value",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0
            }
          },
          {
            "name": "max_outflow_usd",
            "in": "query",
            "description": "maximum outflow USD value",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0
            }
          },
          {
            "name": "min_inflow_usd",
            "in": "query",
            "description": "minimum inflow USD value",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0
            }
          },
          {
            "name": "max_inflow_usd",
            "in": "query",
            "description": "maximum inflow USD value",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0
            }
          },
          {
            "name": "analysed_at_before",
            "in": "query",
            "description": "only return wallet analyses that has been analysed before the given time (ISO8601 datetime)",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2030-02-26T14:33:34.787Z"
          },
          {
            "name": "analysed_at_after",
            "in": "query",
            "description": "only return wallet analyses that has been analysed after the given time (ISO8601 datetime)",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2010-02-26T14:33:34.787Z"
          },
          {
            "name": "customer_reference_contains",
            "in": "query",
            "description": "only return wallet analyses whose customer reference contains the given string",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "address_hash_contains",
            "in": "query",
            "description": "filter wallet analyses whose address contains the given string",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "entity_name_contains",
            "in": "query",
            "description": "filter wallet analyses whose name contains the given string",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "entity_category_contains",
            "in": "query",
            "description": "filter wallet analyses whose category contains the given string",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "min_risk_score",
            "in": "query",
            "description": "minimum risk score",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0,
              "maximum": 10
            }
          },
          {
            "name": "max_risk_score",
            "in": "query",
            "description": "maximum risk score",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0,
              "maximum": 10
            }
          },
          {
            "name": "process_status",
            "in": "query",
            "description": "return rows that are in any of the states specified in the array. Each element is one of (running, complete, error).",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "running",
                  "complete",
                  "error"
                ]
              }
            }
          },
          {
            "name": "asset",
            "in": "query",
            "description": "return only wallet analyses that has been made on a particular asset",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "risk_rules",
            "in": "query",
            "description": "return wallets that has triggered at least one of the specified risk_rules. To get transactions that have not triggered any rules, include empty string in your query. e.g. \"?risk_rules=,f7c36274-ba55-4f6b-8d46-d8cbe97d7c32\"",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "NullableUUIDv4"
              },
              "minItems": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by criterion",
            "schema": {
              "type": "string",
              "enum": [
                "entity_name",
                "-entity_name",
                "entity_category",
                "-entity_category",
                "outflow_usd",
                "-outflow_usd",
                "inflow_usd",
                "-inflow_usd",
                "asset",
                "-asset",
                "customer_reference",
                "-customer_reference",
                "analysed_at",
                "-analysed_at",
                "risk_score",
                "-risk_score"
              ],
              "default": "-analysed_at"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "pagination page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "pagination per page number",
            "schema": {
              "type": "number",
              "format": "int32",
              "minimum": 0,
              "maximum": 500,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful wallet analysis response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "PaginatedWallets",
                  "description": "Paginated array of wallet analyses",
                  "properties": {
                    "page": {
                      "type": "number",
                      "format": "int32",
                      "minimum": 0,
                      "example": 5
                    },
                    "per_page": {
                      "type": "number",
                      "format": "int32",
                      "minimum": 0,
                      "example": 5
                    },
                    "total_pages": {
                      "type": "number",
                      "format": "int32",
                      "minimum": 0,
                      "example": 5
                    },
                    "total_items": {
                      "type": "number",
                      "format": "int32",
                      "minimum": 0,
                      "example": 5
                    },
                    "items": {
                      "type": "array",
                      "description": "array of analyses",
                      "items": {
                        "title": "WalletAnalysisGetAllResponse",
                        "type": "object",
                        "description": "Response for Wallet Analysis get all",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "UUIDv4",
                            "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
                          },
                          "type": {
                            "$ref": "#/components/schemas/WalletAnalysisType"
                          },
                          "subject": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/WalletAnalysisSubject"
                              },
                              {
                                "type": "object"
                              }
                            ]
                          },
                          "customer": {
                            "type": "object",
                            "properties": {
                              "reference": {
                                "type": "string",
                                "description": "the string reference that has been given to this customer",
                                "example": "foobar"
                              }
                            }
                          },
                          "blockchain_info": {
                            "description": "free-form blockchain data of the subject's objects",
                            "type": "object",
                            "properties": {
                              "cluster": {
                                "type": "object",
                                "properties": {
                                  "inflow_value": {
                                    "type": "object",
                                    "description": "value of cluster's inflowing funds",
                                    "properties": {
                                      "usd": {
                                        "type": "number",
                                        "description": "Transaction amount expressed in US dollars of the blockchain it has occurred in the most precise unit possible, e.g. satoshis for bitcoin",
                                        "example": 38383838
                                      }
                                    }
                                  },
                                  "outflow_value": {
                                    "type": "object",
                                    "description": "value of cluster's outflowing funds",
                                    "properties": {
                                      "usd": {
                                        "type": "number"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "created_at": {
                            "description": "ISO date time with time zone (UTC) of when the analysis was first analysed",
                            "type": "string",
                            "format": "date-time",
                            "example": "2015-05-13T10:36:21.000Z"
                          },
                          "updated_at": {
                            "description": "ISO date time with time zone (UTC) of when the wallet analysis was last updated",
                            "type": "string",
                            "format": "date-time",
                            "example": "2015-05-13T10:36:21.000Z"
                          },
                          "analysed_at": {
                            "description": "ISO date time with time zone (UTC) of when this analysis was completed",
                            "type": "string",
                            "format": "date-time",
                            "example": "2015-05-13T10:36:21.000Z"
                          },
                          "cluster_entities": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/WalletAnalysisResponse/properties/cluster_entities/items"
                            }
                          },
                          "process_status": {
                            "description": "the process status ('running','complete','error')",
                            "type": "string",
                            "example": "running",
                            "enum": [
                              "running",
                              "complete",
                              "error"
                            ]
                          },
                          "team_id": {
                            "description": "UUIDv4 identifier of the team the customer belongs to",
                            "type": "string",
                            "format": "UUIDv4",
                            "example": "e333694b-c7c7-4a36-bf35-ed2615865242"
                          },
                          "triggered_rules": {
                            "type": "array",
                            "items": {
                              "description": "risk rules which triggered against either source or destination of funds",
                              "type": "object",
                              "properties": {
                                "rule_id": {
                                  "type": "string",
                                  "format": "UUIDv4",
                                  "example": "e333694b-c7c7-4a36-bf35-ed2615865242"
                                },
                                "rule_name": {
                                  "type": "string",
                                  "example": "Illict deposits"
                                },
                                "risk_score": {
                                  "type": "number",
                                  "format": "int32",
                                  "minimum": 0,
                                  "maximum": 10,
                                  "example": 9
                                }
                              }
                            }
                          },
                          "risk_score": {
                            "type": "integer",
                            "format": "int32",
                            "description": "the overall risk score we will show to the user"
                          },
                          "error": {
                            "type": "object",
                            "description": "object, query error (null unless process_status = 'error')",
                            "properties": {
                              "message": {
                                "type": "string",
                                "description": "error message",
                                "example": "something went wrong"
                              }
                            }
                          }
                        },
                        "required": [
                          "id",
                          "type",
                          "subject",
                          "customer",
                          "blockchain_info",
                          "created_at",
                          "updated_at",
                          "analysed_at",
                          "cluster_entities",
                          "process_status",
                          "team_id",
                          "triggered_rules"
                        ],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": [
                    "page",
                    "per_page",
                    "total_pages",
                    "total_items",
                    "items"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/wallet/{wallet_analysis_id}": {
      "get": {
        "tags": [
          "Wallet Analyses"
        ],
        "summary": "Get an analysis by ID",
        "description": "Given an ID, return a single wallet analysis",
        "parameters": [
          {
            "name": "wallet_analysis_id",
            "description": "id of the wallet analysis to retrieve",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUIDv4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful wallet analysis response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletAnalysisResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "GenericErrorName"
          },
          "message": {
            "type": "string",
            "example": "Something bad happened."
          }
        }
      },
      "BadRequestError": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "BadRequestError"
          },
          "message": {
            "type": "string",
            "example": "Invalid id parameter"
          }
        }
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "NotFoundError"
          },
          "message": {
            "type": "string",
            "example": "Entity not found."
          }
        }
      },
      "UnauthorizedError": {
        "type": "string",
        "example": "Unauthorized"
      },
      "ForbiddenError": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "ForbiddenError"
          },
          "message": {
            "type": "string",
            "example": "You do not have enough privilege to access this path."
          }
        }
      },
      "ServerError": {
        "type": "object",
        "example": {}
      },
      "NotInBlockchain": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "NotInBlockchain"
          },
          "message": {
            "type": "string",
            "example": "The submitted ${type} with hash ${hash} has not yet been processed into the Elliptic tool or does not exist on the blockchain."
          }
        }
      },
      "InvalidTxOutput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "InvalidTxOutput"
          },
          "message": {
            "type": "string",
            "example": "The submitted ${outputType} ${outputIdentifier} is not present in the outputs of transaction ${txHash}"
          }
        }
      },
      "AnalysisType": {
        "title": "AnalysisType",
        "description": "The type of analysis",
        "type": "string",
        "enum": [
          "source_of_funds",
          "destination_of_funds"
        ],
        "example": "source_of_funds"
      },
      "WalletAnalysisType": {
        "title": "WalletAnalysisType",
        "description": "The type of analysis. Currently it is wallet_exposure",
        "type": "string",
        "example": "wallet_exposure"
      },
      "Customer": {
        "type": "object",
        "title": "Customer",
        "description": "an object representing a single Customer",
        "properties": {
          "id": {
            "description": "UUIDv4 identifier of the customer",
            "type": "string",
            "format": "UUIDv4",
            "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
          },
          "updated_at": {
            "description": "ISO date time with time zone (UTC) of when the customer was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2015-05-13T10:36:21.000Z"
          },
          "created_at": {
            "description": "Customer's creation's ISO date time with time zone (UTC)",
            "type": "string",
            "format": "date-time",
            "example": "2015-05-13T10:36:21.000Z"
          },
          "team_id": {
            "description": "UUIDv4 identifier of the team the customer belongs to",
            "type": "string",
            "format": "UUIDv4",
            "example": "e333694b-c7c7-4a36-bf35-ed2615865242"
          },
          "investigator_id": {
            "description": "UUIDv4 identifier of the user assigned to investigate customer",
            "format": "NullableUUIDv4",
            "example": "b68704ce-7aaa-45b1-996d-8d760657baf2"
          },
          "reference": {
            "description": "used by our client to refer to this customer",
            "type": "string",
            "example": "Investigator"
          },
          "labels": {
            "description": "list of labels applied to the customer. If not expanded then just array of {\"id\":// uuid, label ids }",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object"
                }
              ]
            },
            "example": [
              {
                "id": "2118a3ca-a1c0-4f81-92b1-a1069d6a8fb9",
                "team_id": "15f2b16d-f825-4d40-8db3-f4e080f90759",
                "name": "Parent Label",
                "parent_customer_label_id": null
              }
            ]
          },
          "status": {
            "description": "customer's status",
            "type": "string",
            "enum": [
              "processing",
              "error",
              "complete"
            ],
            "example": "complete"
          },
          "is_processing": {
            "description": "true if a query on this customer currently processing",
            "type": "boolean",
            "example": false
          },
          "has_errors": {
            "description": "true if a query on this customer has errored",
            "type": "boolean",
            "example": true
          },
          "last_queried": {
            "description": "ISO date time with time zone (UTC) of when the last query was run",
            "type": "string",
            "format": "date-time",
            "example": "2015-05-13T10:36:21.000Z"
          },
          "workflow_status": {
            "type": "string",
            "description": "the workflow status",
            "enum": [
              "active",
              "archived"
            ]
          },
          "statistics": {
            "type": "object",
            "title": "CustomerStats",
            "description": "an object representing aggregated statistics for a single customer",
            "properties": {
              "first_tx_time": {
                "description": "ISO date time with time zone (UTC) of the transaction having the smallest transaction time",
                "format": "date-time",
                "example": "2015-05-13T10:36:21.000Z",
                "nullable": true,
                "type": "string"
              },
              "last_tx_time": {
                "description": "ISO date time with time zone (UTC) of the transaction having the biggest transaction time",
                "format": "date-time",
                "example": "2015-05-13T10:36:21.000Z",
                "nullable": true,
                "type": "string"
              },
              "avg_score": {
                "description": "average between all this customer's transactions risks",
                "format": "float",
                "example": 3.3,
                "nullable": true,
                "type": "number"
              },
              "max_score": {
                "description": "the highest risk of this customer's transactions risks",
                "format": "float",
                "example": 9,
                "nullable": true,
                "type": "number"
              },
              "min_score": {
                "description": "the minimum risk of this customer's transactions risks",
                "format": "float",
                "example": 9,
                "nullable": true,
                "type": "number"
              },
              "total_volume": {
                "description": "sum of all customer transactions output satoshis",
                "format": "int64",
                "example": 993842398342,
                "nullable": true,
                "type": "number"
              },
              "total_fees": {
                "description": "sum of all customer transactions fees",
                "format": "int64",
                "example": 993842398342,
                "nullable": true,
                "type": "number"
              },
              "customer_tx_count": {
                "description": "total number of customer_txs that this customer has",
                "format": "int32",
                "example": 900800,
                "nullable": true,
                "type": "number"
              },
              "deposits": {
                "type": "object",
                "title": "customerTxInfo",
                "description": "an object representing a single analysed Transaction attached to a Customer",
                "properties": {
                  "total_volume": {
                    "description": "Sum of all transactions' volume",
                    "example": 993842398342,
                    "nullable": true,
                    "type": "number"
                  },
                  "customer_tx_count": {
                    "description": "Number of transactions",
                    "format": "int64",
                    "example": 3341,
                    "nullable": true,
                    "type": "number"
                  },
                  "total_fees": {
                    "description": "sum of all customer transactions fees",
                    "format": "int64",
                    "example": 993842398342,
                    "nullable": true,
                    "type": "number"
                  }
                },
                "required": [
                  "total_volume",
                  "customer_tx_count"
                ],
                "additionalProperties": false
              },
              "withdrawals": {
                "$ref": "#/components/schemas/Customer/properties/statistics/properties/deposits"
              },
              "min_output_satoshis": {
                "description": "the lowest volume of this customer's transactions volumes",
                "example": 993842398342,
                "nullable": true,
                "type": "number"
              },
              "max_output_satoshis": {
                "description": "the highest volume of this customer's transactions volumes",
                "example": 993842398342,
                "nullable": true,
                "type": "number"
              },
              "avg_output_satoshis": {
                "description": "average of this customer's transactions volumes",
                "example": 993842398342,
                "nullable": true,
                "type": "number"
              }
            },
            "required": [
              "first_tx_time",
              "last_tx_time",
              "avg_score",
              "max_score",
              "total_volume",
              "customer_tx_count",
              "deposits",
              "withdrawals",
              "min_output_satoshis",
              "max_output_satoshis",
              "avg_output_satoshis"
            ],
            "additionalProperties": false
          }
        },
        "required": [
          "id",
          "team_id",
          "reference",
          "last_queried",
          "workflow_status"
        ],
        "additionalProperties": false
      },
      "AnalysisRequestBatch": {
        "description": "the analyses to request",
        "type": "array",
        "minItems": 1,
        "maxItems": 100,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/BCHAnalysisRequest"
            },
            {
              "$ref": "#/components/schemas/BCHOutputIndexAnalysisRequest"
            },
            {
              "$ref": "#/components/schemas/BTCAnalysisRequest"
            },
            {
              "$ref": "#/components/schemas/BTCOutputIndexAnalysisRequest"
            },
            {
              "$ref": "#/components/schemas/ERC20AnalysisRequest"
            },
            {
              "$ref": "#/components/schemas/ERC20LogIndexAnalysisRequest"
            },
            {
              "$ref": "#/components/schemas/ETHAnalysisRequest"
            },
            {
              "$ref": "#/components/schemas/LTCAnalysisRequest"
            },
            {
              "$ref": "#/components/schemas/LTCOutputIndexAnalysisRequest"
            },
            {
              "$ref": "#/components/schemas/XRPAnalysisRequest"
            },
            {
              "$ref": "#/components/schemas/XLMAnalysisRequest"
            },
            {
              "$ref": "#/components/schemas/ZILAnalysisRequest"
            },
            {
              "$ref": "#/components/schemas/ZRC2AnalysisRequest"
            }
          ]
        }
      },
      "AnalysisBatchResponse": {
        "title": "AnalysisBatchResponse",
        "type": "array",
        "description": "details of each submitted analysis",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "UUIDv4",
              "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
            },
            "type": {
              "$ref": "#/components/schemas/AnalysisType"
            },
            "subject": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AnalysisSubject"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "UUIDv4",
                      "description": "the UUID of the subject",
                      "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
                    }
                  }
                }
              ]
            },
            "analysed_by": {
              "type": "object",
              "description": "the actor who requested the analysis",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "the actor id",
                  "format": "UUIDv4",
                  "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
                }
              }
            },
            "analysed_at": {
              "type": "string",
              "format": "date-time",
              "description": "the timestamp of when this analysis was completed"
            },
            "customer": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "UUIDv4",
                  "description": "the UUIDv4 of the customer this analysis is associated with",
                  "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
                },
                "reference": {
                  "type": "string",
                  "description": "the string reference that has been given to this customer",
                  "example": "foobar"
                }
              }
            }
          },
          "required": [
            "id",
            "type",
            "subject",
            "analysed_by",
            "analysed_at",
            "customer"
          ],
          "additionalProperties": false
        }
      },
      "CustomerLabel": {
        "type": "object",
        "title": "CustomerLabel",
        "description": "an object representing a label attached to a Customer",
        "properties": {
          "id": {
            "description": "UUIDv4 identifier of the label",
            "type": "string",
            "format": "UUIDv4",
            "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
          },
          "updated_at": {
            "description": "ISO date time with time zone (UTC) of when the label was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2015-05-13T10:36:21.000Z"
          },
          "created_at": {
            "description": "Label's creation's ISO date time with time zone (UTC)",
            "type": "string",
            "format": "date-time",
            "example": "2015-05-13T10:36:21.000Z"
          },
          "team_id": {
            "description": "UUIDv4 identifier of the team the customer belongs to",
            "type": "string",
            "format": "UUIDv4",
            "example": "e333694b-c7c7-4a36-bf35-ed2615865242"
          },
          "name": {
            "description": "the label",
            "type": "string",
            "example": "Miner"
          },
          "parent_customer_label_id": {
            "description": "the parent label id",
            "format": "NullableUUIDv4",
            "example": "e333694b-c7c7-4a36-bf35-ed2615865242",
            "nullable": true,
            "type": "string"
          },
          "full_path": {
            "description": "a full path to the current label e.g. \"Type/Miner\" (if parent name is 'Type' and this label is 'Miner')",
            "type": "string",
            "example": "Type/Miner"
          }
        },
        "additionalProperties": false
      },
      "RiskRuleEvaluation": {
        "title": "RiskRuleEvaluation",
        "type": "object",
        "description": "result of a risk rule's evaluation",
        "properties": {
          "id": {
            "description": "UUIDv4 identifier of the Rule that as been evaluated",
            "type": "string",
            "format": "UUIDv4",
            "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
          },
          "name": {
            "description": "evaluation rule name",
            "type": "string",
            "example": "LocalBitcoins"
          },
          "rule_score": {
            "description": "resulting rule score",
            "type": "number",
            "format": "double",
            "example": 3.3
          },
          "evaluation_detail": {
            "description": "further information about the evaluation",
            "type": "object",
            "properties": {
              "matched_entities": {
                "description": "list of entities which have been trace to the transaction",
                "type": "array",
                "items": {
                  "description": "UUIDv4 identifier of a trace entity",
                  "type": "string",
                  "format": "UUIDv4"
                }
              }
            },
            "required": [
              "matched_entities"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "rule_score"
        ],
        "additionalProperties": false
      },
      "RiskRule": {
        "title": "RiskRule",
        "type": "object",
        "description": "a single risk rule",
        "properties": {
          "id": {
            "description": "UUIDv4 identifier of the Rule",
            "type": "string",
            "format": "UUIDv4",
            "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
          },
          "team_id": {
            "description": "UUIDv4 identifier of the team owning this rule",
            "format": "NullableUUIDv4",
            "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "name of this rule",
            "type": "string",
            "example": "Dark net markets",
            "maxLength": 100,
            "minLength": 1
          },
          "categories": {
            "description": "categories on which this rule applies",
            "type": "array",
            "items": {
              "title": "SimpleCategory",
              "description": "A category associated to labelled entities\n",
              "type": "object",
              "properties": {
                "id": {
                  "description": "UUIDv4 identifier of the Category",
                  "type": "string",
                  "format": "UUIDv4",
                  "example": "6d1cf647-991f-4c90-a26d-e90d4198f6e3"
                },
                "name": {
                  "description": "a real-world description of the category\n",
                  "type": "string",
                  "example": "Gambling"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          },
          "entities": {
            "description": "entities on which this rule applies",
            "type": "array",
            "items": {
              "title": "SimpleLabel",
              "description": "A single simple cluster label with name and category\n",
              "type": "object",
              "properties": {
                "id": {
                  "description": "UUIDv4 identifier of the label",
                  "type": "string",
                  "format": "UUIDv4",
                  "example": "d7535048-76f8-4f60-bdd3-9d659298f9e7"
                },
                "name": {
                  "description": "a real-world description of the labelled cluster, derived from the\nassertions associated to this label\n",
                  "type": "string",
                  "example": "Mt.Gox"
                },
                "category": {
                  "description": "a categorical description of the real-world entity controlling the\nlabelled cluster\n",
                  "type": "string",
                  "example": "Exchange"
                }
              },
              "required": [
                "id",
                "name",
                "category"
              ]
            }
          },
          "use_for_deposits": {
            "type": "boolean",
            "description": "whether to use this rule for deposit transaction analysis",
            "example": false
          },
          "use_for_withdrawals": {
            "type": "boolean",
            "description": "whether to use this rule for withdrawal transaction analysis",
            "example": true
          },
          "rule_criteria": {
            "type": "array",
            "description": "array of criteria applied by the rule",
            "items": {
              "title": "RiskRuleCriterion",
              "type": "object",
              "description": "a single risk rule criterion definition",
              "properties": {
                "id": {
                  "description": "criterion ID within a single rule",
                  "type": "number",
                  "format": "int32",
                  "example": 2
                },
                "criteria_type": {
                  "description": "types of criteria within a single rule criterion definition",
                  "type": "string",
                  "enum": [
                    "linear_scale"
                  ],
                  "example": "linear_scale"
                },
                "criteria": {
                  "title": "RiskRuleCriterionLogic",
                  "description": "object representing criteria logic",
                  "type": "object",
                  "properties": {
                    "satoshis_pct_contribution": {
                      "title": "PercentageContributionCriterion",
                      "type": "object",
                      "description": "criterion based around percentage contribution",
                      "additionalProperties": false,
                      "properties": {
                        "min_threshold": {
                          "description": "lower threshold for contribution",
                          "type": "number",
                          "minimum": 0,
                          "maximum": 100,
                          "example": 20
                        },
                        "max_threshold": {
                          "description": "upper threshold for contribution",
                          "type": "number",
                          "minimum": 0,
                          "maximum": 100,
                          "example": 20
                        }
                      },
                      "required": [
                        "min_threshold",
                        "max_threshold"
                      ]
                    },
                    "satoshis_vol_contribution": {
                      "title": "VolumeContributionCriterion",
                      "type": "object",
                      "description": "criterion based around volume contribution",
                      "additionalProperties": false,
                      "properties": {
                        "min_threshold": {
                          "description": "lower threshold for contribution",
                          "type": "number",
                          "minimum": 0,
                          "example": 200000000
                        },
                        "max_threshold": {
                          "description": "upper threshold for contribution",
                          "type": "number",
                          "minimum": 0,
                          "example": 2000000000
                        }
                      },
                      "required": [
                        "min_threshold",
                        "max_threshold"
                      ]
                    },
                    "usd_contribution": {
                      "title": "USDContributionCriterion",
                      "type": "object",
                      "description": "criterion based around usd contribution",
                      "additionalProperties": false,
                      "properties": {
                        "min_threshold": {
                          "description": "lower threshold for contribution",
                          "type": "number",
                          "minimum": 0,
                          "example": 200000000
                        },
                        "max_threshold": {
                          "description": "upper threshold for contribution",
                          "type": "number",
                          "minimum": 0,
                          "example": 2000000000
                        }
                      },
                      "required": [
                        "min_threshold",
                        "max_threshold"
                      ]
                    }
                  },
                  "minProperties": 1,
                  "maxProperties": 1,
                  "additionalProperties": false,
                  "example": {
                    "satoshis_pct_contribution": {
                      "min_threshold": 30,
                      "max_threshold": 60
                    }
                  }
                },
                "outcome": {
                  "title": "RiskRuleCriterionOutcome",
                  "description": "range of criteria's outcome in terms of risk score",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "min_score": {
                      "description": "the value the triggered rule will assign at the lower threshold\n",
                      "type": "number",
                      "minimum": 0,
                      "maximum": 10
                    },
                    "max_score": {
                      "description": "the value the triggered rule will assign at the upper threshold\n",
                      "type": "number",
                      "minimum": 0,
                      "maximum": 10
                    }
                  },
                  "example": {
                    "min_score": 3,
                    "max_score": 8
                  }
                }
              },
              "required": [
                "id",
                "criteria_type",
                "criteria",
                "outcome"
              ],
              "additionalProperties": false
            }
          }
        },
        "required": [
          "id",
          "team_id",
          "name",
          "use_for_deposits",
          "use_for_withdrawals",
          "rule_criteria"
        ]
      },
      "UsersResponse": {
        "title": "UsersResponse",
        "type": "object",
        "properties": {
          "id": {
            "description": "Team User's UUIDv4 (unique for team & user)",
            "type": "string",
            "format": "UUIDv4",
            "example": "17535048-76f8-4f60-bdd3-9d659298f9e5"
          },
          "updated_at": {
            "description": "ISO date time with time zone (UTC) of when the User was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2015-05-13T10:36:21.000Z"
          },
          "created_at": {
            "description": "User's creation's ISO date time with time zone (UTC)",
            "type": "string",
            "format": "date-time",
            "example": "2015-05-13T10:36:21.000Z"
          },
          "team_id": {
            "description": "Team's UUIDv4",
            "type": "string",
            "format": "UUIDv4",
            "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
          },
          "user_id": {
            "description": "User's UUIDv4",
            "type": "string",
            "format": "UUIDv4",
            "example": "67535048-76f9-4f61-bdd3-9d659298f9e4"
          },
          "email": {
            "description": "the email address of the User",
            "type": "string",
            "example": "foo_bar@elliptic.co"
          },
          "first_name": {
            "description": "the first name of the User",
            "type": "string",
            "example": "Foo"
          },
          "last_name": {
            "description": "the last name of the User",
            "type": "string",
            "example": "Bar"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "team_id",
          "user_id",
          "email",
          "first_name",
          "last_name"
        ],
        "additionalProperties": false
      },
      "WalletAnalysisResponse": {
        "title": "WalletAnalysisResponse",
        "type": "object",
        "description": "Response for Wallet Analysis",
        "properties": {
          "id": {
            "type": "string",
            "format": "UUIDv4",
            "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
          },
          "type": {
            "$ref": "#/components/schemas/WalletAnalysisType"
          },
          "subject": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletAnalysisSubject"
              },
              {
                "type": "object"
              }
            ]
          },
          "customer": {
            "type": "object",
            "properties": {
              "reference": {
                "type": "string",
                "description": "the string reference that has been given to this customer",
                "example": "foobar"
              }
            }
          },
          "blockchain_info": {
            "description": "free-form blockchain data of the subject's objects",
            "type": "object",
            "properties": {
              "cluster": {
                "type": "object",
                "properties": {
                  "inflow_value": {
                    "type": "object",
                    "description": "value of cluster's inflowing funds",
                    "properties": {
                      "usd": {
                        "type": "number",
                        "description": "Transaction amount expressed in US dollars of the blockchain it has occurred in the most precise unit possible, e.g. satoshis for bitcoin",
                        "example": 38383838
                      }
                    }
                  },
                  "outflow_value": {
                    "type": "object",
                    "description": "value of cluster's outflowing funds",
                    "properties": {
                      "usd": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "created_at": {
            "description": "ISO date time with time zone (UTC) of when the analysis was first analysed",
            "type": "string",
            "format": "date-time",
            "example": "2015-05-13T10:36:21.000Z"
          },
          "updated_at": {
            "description": "ISO date time with time zone (UTC) of when the wallet analysis was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2015-05-13T10:36:21.000Z"
          },
          "analysed_at": {
            "description": "ISO date time with time zone (UTC) of when this analysis was completed",
            "type": "string",
            "format": "date-time",
            "example": "2015-05-13T10:36:21.000Z"
          },
          "cluster_entities": {
            "type": "array",
            "items": {
              "title": "WalletAssertedLabel",
              "description": "An Elliptic-created, wallet asserted label to be attached to a cluster\n",
              "type": "object",
              "properties": {
                "name": {
                  "description": "a real-world description of the labelled cluster, derived from the\nassertions associated to this label\n",
                  "type": "string",
                  "example": "Mt.Gox"
                },
                "category": {
                  "description": "a categorical description of the real-world entity controlling the\nlabelled cluster\n",
                  "type": "string",
                  "example": "Exchange"
                },
                "is_primary_entity": {
                  "description": "a flag that shows if the entity is primary or not. Only one\nin the whole array of labels\n",
                  "type": "boolean",
                  "example": "true"
                }
              },
              "required": [
                "name",
                "category",
                "is_primary_entity"
              ]
            }
          },
          "process_status": {
            "description": "the process status ('running','complete','error')",
            "type": "string",
            "example": "running",
            "enum": [
              "running",
              "complete",
              "error"
            ]
          },
          "team_id": {
            "description": "UUIDv4 identifier of the team the customer belongs to",
            "type": "string",
            "format": "UUIDv4",
            "example": "e333694b-c7c7-4a36-bf35-ed2615865242"
          },
          "risk_score": {
            "type": "number",
            "format": "float",
            "description": "the overall risk score we will show to the user",
            "example": 6
          },
          "error": {
            "type": "object",
            "description": "object, query error (null unless process_status = 'error')",
            "properties": {
              "message": {
                "type": "string",
                "description": "error message",
                "example": "something went wrong"
              }
            }
          },
          "evaluation_details": {
            "type": "object",
            "description": "details of risk rule evaluations for both source and destination of funds",
            "properties": {
              "source": {
                "type": "array",
                "items": {
                  "title": "EvaluationDetail",
                  "type": "object",
                  "description": "details of a single risk rule evaluation",
                  "properties": {
                    "rule_id": {
                      "description": "the UUIDv4 of this risk rule",
                      "type": "string",
                      "format": "UUIDv4",
                      "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
                    },
                    "rule_name": {
                      "description": "the name of the rule",
                      "type": "string",
                      "example": "Gambling"
                    },
                    "risk_score": {
                      "description": "The risk score calculated for this rule evaluation as part of the analysis",
                      "type": "number",
                      "format": "float",
                      "example": 6
                    },
                    "matched_elements": {
                      "type": "array",
                      "description": "array of entities identified by this risk rule evaluation",
                      "items": {
                        "$ref": "#/components/schemas/MatchedElement"
                      }
                    }
                  },
                  "required": [
                    "rule_id",
                    "risk_score"
                  ],
                  "additionalProperties": false
                }
              },
              "destination": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WalletAnalysisResponse/properties/evaluation_details/properties/source/items"
                }
              }
            }
          },
          "contributions": {
            "description": "array of contributions for the analysis subject retrieved from the graph server",
            "type": "object",
            "properties": {
              "source": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Contribution"
                }
              },
              "destination": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Contribution"
                }
              }
            }
          },
          "risk_score_detail": {
            "description": "details on the risk scores of the source and destination of funds",
            "properties": {
              "source": {
                "type": "number",
                "format": "float",
                "example": 6
              },
              "destination": {
                "type": "number",
                "format": "float",
                "example": 6
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "subject",
          "customer",
          "blockchain_info",
          "created_at",
          "updated_at",
          "analysed_at",
          "cluster_entities",
          "process_status",
          "team_id"
        ],
        "additionalProperties": false
      },
      "AnalysisSubject": {
        "title": "AnalysisSubject",
        "type": "object",
        "properties": {
          "asset": {
            "type": "string",
            "description": "the asset involved in the event. Currently, only ETH, ERC20 and BTC are supported",
            "example": "ETH"
          },
          "type": {
            "type": "string",
            "description": "the type of subject. Currently, only 'transaction' is supported",
            "example": "transaction"
          },
          "hash": {
            "type": "string",
            "description": "the transaction hash",
            "example": "0x4672bad527107471cb5067a887f4656d585a8a31"
          },
          "transaction_hash": {
            "type": "string",
            "description": "the transaction hash when using type output",
            "example": "dbaf14e1c476e76ea05a8b71921a46d6b06f0a950f17c5f9f1a03b8fae467f10"
          },
          "output_type": {
            "type": "string",
            "enum": [
              "address",
              "indices"
            ],
            "description": "which output type you are using to specify the output(s) you wish to analyse (BTC/LTC/BCH only)"
          },
          "output_address": {
            "type": "string",
            "description": "the address hash when using output_type address",
            "example": "1MdYC22Gmjp2ejVPCxyYjFyWbQCYTGhGq8"
          },
          "output_indices": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "the indices of outputs to be analysed when using output_type indices",
            "example": [
              1
            ]
          },
          "log_index": {
            "type": "number",
            "description": "the log index of an ERC20 transacation",
            "example": 10
          }
        },
        "required": [
          "asset",
          "type"
        ]
      },
      "WalletAnalysisSubject": {
        "title": "WalletAnalysisSubject",
        "type": "object",
        "properties": {
          "asset": {
            "type": "string",
            "description": "the asset involved in the event",
            "example": "ETH"
          },
          "type": {
            "type": "string",
            "description": "the type of subject. Currently, only 'address' is supported",
            "example": "address"
          },
          "hash": {
            "type": "string",
            "description": "the address hash when using type address",
            "example": "1MdYC22Gmjp2ejVPCxyYjFyWbQCYTGhGq8"
          }
        }
      },
      "Contribution": {
        "title": "Contribution",
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "description": "array of entities (labels) associated with this single contributions",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "name of this entity",
                  "example": "Alphabay"
                },
                "category": {
                  "type": "string",
                  "description": "category to which this entity belongs to",
                  "example": "Dark Marker"
                }
              }
            }
          },
          "contribution_percentage": {
            "type": "number",
            "format": "float",
            "description": "the percentage of the total contribution that is coming from this single address",
            "example": 6.9883
          },
          "contribution_value": {
            "type": "object",
            "properties": {
              "native": {
                "type": "number",
                "format": "float",
                "description": "the value of the total contribution that is coming from this single address, in the asset's lowest unit (e.g. satoshis or wei)",
                "example": 0.07414304
              }
            }
          }
        },
        "required": [
          "entities",
          "contribution_percentage",
          "contribution_value"
        ]
      },
      "MatchedElement": {
        "title": "MatchedElement",
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "category of the risk rule's subject that has been triggered by one or more elements"
          },
          "contribution_percentage": {
            "type": "number",
            "format": "float",
            "description": "aggregated value (sum) of all the contributions that triggered a risk rule subject"
          },
          "contribution_value": {
            "type": "object",
            "properties": {
              "native": {
                "type": "number",
                "description": "Transaction amount expresses in the native currency of the blockchain it has occurred in the most precise unit possible, e.g. satoshis for bitcoin",
                "example": 38383838
              },
              "native_major": {
                "type": "number",
                "description": "Transaction amount expressed in the native currency of the blockchain it has occurred rounded to its major decimal format",
                "example": 383.83838
              },
              "usd": {
                "type": "number",
                "description": "Transaction amount expressed in US dollars of the blockchain it has occurred in the most precise unit possible, e.g. satoshis for bitcoin",
                "example": 383.83838
              }
            }
          },
          "contributions": {
            "type": "array",
            "description": "array of entities that triggered a rule",
            "items": {
              "type": "object",
              "properties": {
                "contribution_percentage": {
                  "type": "number",
                  "format": "float",
                  "description": "percentage of contribution coming from this entity"
                },
                "entity": {
                  "type": "string",
                  "description": "name of the entity"
                },
                "contribution_value": {
                  "type": "object",
                  "properties": {
                    "native": {
                      "type": "number",
                      "description": "Transaction amount expresses in the native currency of the blockchain it has occurred in the most precise unit possible, e.g. satoshis for bitcoin",
                      "example": 38383838
                    },
                    "native_major": {
                      "type": "number",
                      "description": "Transaction amount expressed in the native currency of the blockchain it has occurred rounded to its major decimal format",
                      "example": 383.83838
                    },
                    "usd": {
                      "type": "number",
                      "description": "Transaction amount expressed in US dollars of the blockchain it has occurred in the most precise unit possible, e.g. satoshis for bitcoin",
                      "example": 383.83838
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "category",
          "contribution_percentage",
          "contribution_value",
          "contributions"
        ]
      },
      "InputOutput": {
        "title": "InputOutput",
        "type": "object",
        "description": "An input or output (IO) of a transaction",
        "properties": {
          "hash": {
            "type": "string",
            "example": "0x056fd409e1d7a124bd7017459dfea2f387b6d5cd",
            "description": "blockchain identifier of the IO"
          },
          "amount": {
            "type": "object",
            "properties": {
              "native": {
                "type": "number",
                "description": "Transaction amount expresses in the native currency of the blockchain it has occurred in the most precise unit possible, e.g. satoshis for bitcoin",
                "example": 38383838
              },
              "native_major": {
                "type": "number",
                "description": "Transaction amount expressed in the native currency of the blockchain it has occurred rounded to its major decimal format",
                "example": 38383838
              },
              "usd": {
                "type": "number",
                "description": "Transaction amount expressed in US dollars of the blockchain it has occurred in the most precise unit possible, e.g. satoshis for bitcoin",
                "example": 38383838
              }
            }
          },
          "index": {
            "type": "number",
            "example": 0,
            "description": "The index of this IO on the transaction"
          },
          "labels": {
            "type": "array",
            "description": "Label's given to the IO as per Elliptic Assertions",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "A Dark Market"
                },
                "category": {
                  "type": "string",
                  "example": "Dark Market"
                },
                "is_primary_entity": {
                  "type": "boolean",
                  "description": "Is this the primary label of the entity"
                }
              }
            }
          }
        }
      },
      "BCHAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "BCH"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "4ded7bbe92b87213c4044b3e7f71fefe6f9dfc144feda8240141ef1c0ce634c3"
              },
              "output_type": {
                "type": "string",
                "enum": [
                  "address"
                ],
                "example": "address",
                "description": "which output type you are using to specify the output(s) you wish to analyse"
              },
              "output_address": {
                "type": "string",
                "description": "the address hash when using output_type address",
                "example": "QQFM85M0U77DSTFNEPCWYP5ACF9WJCAVTQK0HY5G0A"
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "output_type",
              "output_address"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "BCHOutputIndexAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "BCH"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "4ded7bbe92b87213c4044b3e7f71fefe6f9dfc144feda8240141ef1c0ce634c3"
              },
              "output_type": {
                "type": "string",
                "enum": [
                  "indices"
                ],
                "example": "indices",
                "description": "which output type you are using to specify the output(s) you wish to analyse"
              },
              "output_indices": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "the indices of outputs to be analysed when using output_type indices",
                "example": [
                  0
                ]
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "output_type",
              "output_indices"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "BTCAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "BTC"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "16e37268c8dba6eded4dce68060fe5783d6397455410fb9959fecc4644d98340"
              },
              "output_type": {
                "type": "string",
                "enum": [
                  "address"
                ],
                "example": "address",
                "description": "which output type you are using to specify the output(s) you wish to analyse"
              },
              "output_address": {
                "type": "string",
                "description": "the address hash when using output_type address",
                "example": "1cftamBhjtCmCazbqjo6st1mgux1EbTVc"
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "output_type",
              "output_address"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "BTCOutputIndexAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "BTC"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "16e37268c8dba6eded4dce68060fe5783d6397455410fb9959fecc4644d98340"
              },
              "output_type": {
                "type": "string",
                "enum": [
                  "indices"
                ],
                "example": "indices",
                "description": "which output type you are using to specify the output(s) you wish to analyse"
              },
              "output_indices": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "the indices of outputs to be analysed when using output_type indices",
                "example": [
                  0
                ]
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "output_type",
              "output_indices"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "ERC20AnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ERC20"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "0xd6d675e54e614de7b53a7fd2ffb376768f49889c83d35764f1871841a6464d66"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "ERC20LogIndexAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ERC20"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "0xd6d675e54e614de7b53a7fd2ffb376768f49889c83d35764f1871841a6464d66"
              },
              "log_index": {
                "type": "number",
                "description": "the log index of the ethereum transacation can be used to discern between multiple token transfers in the same transaction",
                "example": 0
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "log_index"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "ETHAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ETH"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "0xbb0c3d433c91d3ccc9c382fda744a412544af0752db4bb8c3230ce53b7b6ddfa"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "LTCAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "LTC"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "195329a09650eb8127c0bfddb7057fa5d1e992b3069f1a336ef8aec9e2c06768"
              },
              "output_type": {
                "type": "string",
                "enum": [
                  "address"
                ],
                "example": "address",
                "description": "which output type you are using to specify the output(s) you wish to analyse"
              },
              "output_address": {
                "type": "string",
                "description": "the address hash when using output_type address",
                "example": "MPLZm9gou9X98CkZHbD3Ars85MCMt5Pcfm"
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "output_type",
              "output_address"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "LTCOutputIndexAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "LTC"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "195329a09650eb8127c0bfddb7057fa5d1e992b3069f1a336ef8aec9e2c06768"
              },
              "output_type": {
                "type": "string",
                "enum": [
                  "indices"
                ],
                "example": "indices",
                "description": "which output type you are using to specify the output(s) you wish to analyse"
              },
              "output_indices": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "the indices of outputs to be analysed when using output_type indices",
                "example": [
                  0
                ]
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "output_type",
              "output_indices"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "XRPAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "XRP"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "874C0084C0B103A21A3B5938E56E14789C8AE137BA4B114A6867C9780E7F33BA"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "XLMAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "XLM"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "2901649856e8ca7d356246294461032d3454005b7626f914be9f42e7b467e68c"
              },
              "output_type": {
                "type": "string",
                "enum": [
                  "address"
                ],
                "example": "address",
                "description": "which output type you are using to specify the output(s) you wish to analyse"
              },
              "output_address": {
                "type": "string",
                "description": "the address hash when using output_type address",
                "example": "GDQP2KPQGKIHYJGXNUIYOMHARUARCA7DJT5FO2FFOOKY3B2WSQHG4W37"
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "output_type",
              "output_address"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "ZECAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ZEC"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "715c23949b85581de432f174a9e7f4d3f9e74b008064e2c68e7a52b1ec38e961"
              },
              "output_type": {
                "type": "string",
                "enum": [
                  "address"
                ],
                "example": "address",
                "description": "which output type you are using to specify the output(s) you wish to analyse"
              },
              "output_address": {
                "type": "string",
                "description": "the address hash when using output_type address",
                "example": "t1U5n6Lj6hEMrCjaFg4AZraVa4F7QqxTz9c"
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "output_type",
              "output_address"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "ZECOutputIndexAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ZEC"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "715c23949b85581de432f174a9e7f4d3f9e74b008064e2c68e7a52b1ec38e961"
              },
              "output_type": {
                "type": "string",
                "enum": [
                  "indices"
                ],
                "example": "indices",
                "description": "which output type you are using to specify the output(s) you wish to analyse"
              },
              "output_indices": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "the indices of outputs to be analysed when using output_type indices",
                "example": [
                  0
                ]
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "output_type",
              "output_indices"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "ZENAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ZEN"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "7c8d4b289b63cd0432b44e9001d823278f3b6f375884a2d159e238fdc8ce3994"
              },
              "output_type": {
                "type": "string",
                "enum": [
                  "address"
                ],
                "example": "address",
                "description": "which output type you are using to specify the output(s) you wish to analyse"
              },
              "output_address": {
                "type": "string",
                "description": "the address hash when using output_type address",
                "example": "znXeBsZd4ssctd2YGh9kQ3LE6zh5az5yJUL"
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "output_type",
              "output_address"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "ZENOutputIndexAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ZEN"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "7c8d4b289b63cd0432b44e9001d823278f3b6f375884a2d159e238fdc8ce3994"
              },
              "output_type": {
                "type": "string",
                "enum": [
                  "indices"
                ],
                "example": "indices",
                "description": "which output type you are using to specify the output(s) you wish to analyse"
              },
              "output_indices": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "the indices of outputs to be analysed when using output_type indices",
                "example": [
                  0
                ]
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "output_type",
              "output_indices"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "ZILAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ZIL"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "0x85d12055bdcb4671d522fe6cbda0612abfe54e8de6567dbb63c8008b7fad1316"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "ZRC2AnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "AnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ZRC2"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "transaction"
                ],
                "example": "transaction"
              },
              "hash": {
                "type": "string",
                "description": "the transaction hash",
                "example": "0x51f238b891177d57e2b6bb9b77536228236a4372e147b470cc9dfe90644f2741"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type",
          "customer_reference"
        ]
      },
      "BCHWalletAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "WalletAnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "BCH"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "address"
                ],
                "example": "address"
              },
              "hash": {
                "type": "string",
                "description": "the address hash",
                "example": "qp6l35zju3nhjlfkzs43pgcqpyn6dp7y8yujxqh89n"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/WalletAnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type"
        ]
      },
      "BTCWalletAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "WalletAnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "BTC"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "address"
                ],
                "example": "address"
              },
              "hash": {
                "type": "string",
                "description": "the address hash",
                "example": "18u9Ncc5UBNKGGmThxTjfuFHN69w8Yh8Lg"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/WalletAnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type"
        ]
      },
      "ERC20WalletAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "WalletAnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the protocol that the token implements",
                "enum": [
                  "ERC20"
                ],
                "example": "ERC20"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "address"
                ],
                "example": "address"
              },
              "hash": {
                "type": "string",
                "description": "the address hash",
                "example": "0x7fec4fca822235da8e7ba04d4d354dd3db8c1074"
              },
              "token": {
                "type": "string",
                "description": "the token to screen",
                "example": "GUSD"
              }
            },
            "required": [
              "asset",
              "type",
              "hash",
              "token"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/WalletAnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type"
        ]
      },
      "ETHWalletAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "WalletAnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ETH"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "address"
                ],
                "example": "address"
              },
              "hash": {
                "type": "string",
                "description": "the address hash",
                "example": "0x5024F9a1dED8f675138F473d69BC8848eAA37901"
              }
            },
            "required": [
              "asset",
              "type"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/WalletAnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type"
        ]
      },
      "LTCWalletAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "WalletAnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "LTC"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "address"
                ],
                "example": "address"
              },
              "hash": {
                "type": "string",
                "description": "the address hash",
                "example": "MJvsXWD3Mu2zxnV2qMs4rBBYiNnyiVM2D1"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/WalletAnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type"
        ]
      },
      "XLMWalletAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "WalletAnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "XLM"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "address"
                ],
                "example": "address"
              },
              "hash": {
                "type": "string",
                "description": "the address hash",
                "example": "GBH4TZYZ4IRCPO44CBOLFUHULU2WGALXTAVESQA6432MBJMABBB4GIYI"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/WalletAnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type"
        ]
      },
      "XRPWalletAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "WalletAnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "XRP"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "address"
                ],
                "example": "address"
              },
              "hash": {
                "type": "string",
                "description": "the address hash",
                "example": "rDsbeomae4FXwgQTJp9Rs64Qg9vDiTCdBv"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/WalletAnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type"
        ]
      },
      "ZECWalletAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "WalletAnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ZEC"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "address"
                ],
                "example": "address"
              },
              "hash": {
                "type": "string",
                "description": "the address hash",
                "example": "t1U5n6Lj6hEMrCjaFg4AZraVa4F7QqxTz9c"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/WalletAnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type"
        ]
      },
      "ZENWalletAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "WalletAnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ZEN"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "address"
                ],
                "example": "address"
              },
              "hash": {
                "type": "string",
                "description": "the address hash",
                "example": "znUovxhrE91tep6D7YtgSc3XJZoYQLVDwVn"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/WalletAnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type"
        ]
      },
      "ZILWalletAnalysisRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "title": "WalletAnalysisSubject",
            "type": "object",
            "properties": {
              "asset": {
                "type": "string",
                "description": "the asset involved in the event",
                "example": "ZIL"
              },
              "type": {
                "type": "string",
                "description": "the type of subject",
                "enum": [
                  "address"
                ],
                "example": "address"
              },
              "hash": {
                "type": "string",
                "description": "the address hash",
                "example": "zil1ggkgt2mcl92hw6yccer0f2q694xqkr6dk25cag"
              }
            },
            "required": [
              "asset",
              "type",
              "hash"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/WalletAnalysisType"
          },
          "customer_reference": {
            "type": "string",
            "description": "a reference for the customer. Will create a new customer if one with a matching reference does not exist"
          }
        },
        "required": [
          "subject",
          "type"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BadRequestError"
            }
          }
        }
      },
      "401": {
        "description": "Not authenticated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnauthorizedError"
            }
          }
        }
      },
      "403": {
        "description": "Not authorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ForbiddenError"
            }
          }
        }
      },
      "404": {
        "description": "Resource item not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotFoundError"
            }
          }
        }
      },
      "500": {
        "description": "Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotInBlockchain": {
        "description": "Requested subject not found on the blockchain",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotInBlockchain"
            }
          }
        }
      },
      "GenericBadRequest": {
        "description": "There was an error with your request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InvalidTxOutput"
            }
          }
        }
      },
      "AnalysisResponse": {
        "description": "Successful analysis response",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "type": "string",
                  "format": "UUIDv4",
                  "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
                },
                "type": {
                  "$ref": "#/components/schemas/AnalysisType"
                },
                "subject": {
                  "$ref": "#/components/schemas/AnalysisSubject"
                },
                "analysed_by": {
                  "type": "object",
                  "description": "the actor who requested the analysis",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "the actor id",
                      "format": "UUIDv4",
                      "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
                    },
                    "first_name": {
                      "type": "string",
                      "description": "first name of the actor",
                      "example": "John"
                    },
                    "last_name": {
                      "type": "string",
                      "description": "last name of the actor",
                      "example": "Smith"
                    },
                    "email": {
                      "description": "email of the actor",
                      "example": "john.smith@email.com",
                      "type": "string"
                    }
                  }
                },
                "contributions": {
                  "description": "array of contributions for the analysis subject retrieved from the graph server",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contribution"
                  }
                },
                "analysed_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the timestamp of when this analysis was completed"
                },
                "analysis_meta": {
                  "type": "object"
                },
                "customer": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "UUIDv4",
                      "description": "the UUIDv4 of the customer this analysis is associated with",
                      "example": "b7535048-76f8-4f60-bdd3-9d659298f9e7"
                    },
                    "reference": {
                      "type": "string",
                      "description": "the string reference that has been given to this customer",
                      "example": "foobar"
                    }
                  }
                },
                "risk_score": {
                  "description": "The risk score calculated for this 'blockchain event' as an aggregation from all the rules",
                  "type": "number",
                  "format": "float",
                  "example": 6
                },
                "blockchain_info": {
                  "description": "free-form blockchain data of the subject's objects",
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "object",
                      "properties": {
                        "balance": {
                          "type": "number",
                          "example": 143500000
                        },
                        "first_seen_time": {
                          "type": "number",
                          "example": 1542191566468
                        }
                      }
                    },
                    "transaction": {
                      "type": "object",
                      "properties": {
                        "time": {
                          "type": "string",
                          "example": "2019-05-26T04:36:05.000Z"
                        },
                        "inputs": {
                          "type": "array",
                          "description": "details of each of the transaction's inputs",
                          "items": {
                            "$ref": "#/components/schemas/InputOutput"
                          }
                        },
                        "outputs": {
                          "type": "array",
                          "description": "details of each of the transaction's inputs",
                          "items": {
                            "$ref": "#/components/schemas/InputOutput"
                          }
                        },
                        "value": {
                          "type": "object",
                          "description": "Object representing the value of this transaction expresses in different currency units",
                          "properties": {
                            "native": {
                              "type": "number",
                              "description": "Transaction amount expresses in the native currency of the blockchain it has occurred in the most precise unit possible, e.g. satoshis for bitcoin",
                              "example": 38383838
                            },
                            "native_major": {
                              "type": "number",
                              "description": "Transaction amount expressed in the native currency of the blockchain it has occurred rounded to its major decimal format",
                              "example": 38383838
                            },
                            "usd": {
                              "type": "number",
                              "description": "Transaction amount expressed in US dollars of the blockchain it has occurred in the most precise unit possible, e.g. satoshis for bitcoin",
                              "example": 38383838
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "evaluation_detail": {
                  "type": "array",
                  "description": "details of each risk rule evaluation",
                  "items": {
                    "$ref": "#/components/schemas/WalletAnalysisResponse/properties/evaluation_details/properties/source/items"
                  }
                },
                "predictive": {
                  "description": "True if the transaction was analyzed too close to the tip of the blockchain, so the full picture of associated addresses might be incomplete.",
                  "type": "boolean",
                  "example": false
                }
              },
              "required": [
                "id",
                "type",
                "subject",
                "analysed_by",
                "analysed_at",
                "analysis_meta",
                "customer",
                "risk_score",
                "evaluation_detail",
                "blockchain_info",
                "contributions"
              ],
              "additionalProperties": false
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearer": {
        "description": "Bearer Authentication",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "apiKey": {
        "description": "API Key",
        "type": "apiKey",
        "in": "header",
        "name": "x-access-key"
      },
      "signature": {
        "description": "(Request Time, HTTP Method, Lowercase Path, Request Payload) signed with API Secret",
        "type": "apiKey",
        "in": "header",
        "name": "x-access-sign"
      },
      "timestamp": {
        "type": "apiKey",
        "in": "header",
        "name": "x-access-timestamp"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Navigator",
      "tags": [
        "Transaction Analyses",
        "Risk Rules"
      ]
    },
    {
      "name": "Lens",
      "tags": [
        "Wallet Analyses",
        "Risk Rules"
      ]
    },
    {
      "name": "Workflow Management",
      "tags": [
        "Customers",
        "Customer Labels"
      ]
    },
    {
      "name": "Account Management",
      "tags": [
        "Users"
      ]
    }
  ]
}
